const { Pool } = require('pg');

const pool = new Pool({
  host: 'localhost',
  port: 5432,
  database: 'betpromo',
  user: 'betpromo_user',
  password: 'betpromo_pass',
});

async function verifyPromotionNameTest() {
  console.log('üîç Verificando se o teste com promotionName funcionou...\n');

  try {
    // 1. Verificar se a promo√ß√£o foi criada
    console.log('üìã Verificando promo√ß√µes criadas:');
    const promotionsResult = await pool.query(`
      SELECT promocao_id, nome, status, created_at 
      FROM promocoes 
      WHERE nome LIKE '%TESTE COM PROMOTION NAME%'
      ORDER BY created_at DESC
      LIMIT 5
    `);

    console.log('Promo√ß√µes encontradas:');
    promotionsResult.rows.forEach(promo => {
      console.log(`- ID: ${promo.promocao_id}, Nome: "${promo.nome}", Status: ${promo.status}`);
    });
    console.log('');

    if (promotionsResult.rows.length === 0) {
      console.log('‚ùå Nenhuma promo√ß√£o com o nome esperado foi encontrada!');
      return;
    }

    const targetPromotion = promotionsResult.rows[0];
    console.log(`üéØ Promo√ß√£o alvo: "${targetPromotion.nome}" (ID: ${targetPromotion.promocao_id})\n`);

    // 2. Verificar vincula√ß√µes dos usu√°rios de teste
    const testUsers = ['65020400', '65021174', '65021195'];
    
    for (const userId of testUsers) {
      console.log(`üë§ Verificando usu√°rio ${userId}:`);
      
      // Verificar vincula√ß√µes ativas
      const activeResult = await pool.query(`
        SELECT up.*, p.nome as promocao_nome
        FROM usuario_promocao up
        JOIN promocoes p ON up.promocao_id = p.promocao_id
        WHERE up.smartico_user_id = $1 AND up.status = 'active'
        ORDER BY up.created_at DESC
      `, [userId]);

      console.log(`  Vincula√ß√µes ativas: ${activeResult.rows.length}`);
      activeResult.rows.forEach(link => {
        console.log(`    - Promo√ß√£o: "${link.promocao_nome}" (ID: ${link.promocao_id})`);
      });

      // Verificar se est√° vinculado √† promo√ß√£o correta
      const correctLink = activeResult.rows.find(link => 
        link.promocao_nome === 'TESTE COM PROMOTION NAME PREENCHIDO'
      );

      if (correctLink) {
        console.log(`  ‚úÖ Usu√°rio vinculado √† promo√ß√£o correta!`);
      } else {
        console.log(`  ‚ùå Usu√°rio N√ÉO vinculado √† promo√ß√£o esperada!`);
      }

      // Verificar vincula√ß√µes inativas (antigas)
      const inactiveResult = await pool.query(`
        SELECT up.*, p.nome as promocao_nome
        FROM usuario_promocao up
        JOIN promocoes p ON up.promocao_id = p.promocao_id
        WHERE up.smartico_user_id = $1 AND up.status = 'inactive'
        ORDER BY up.updated_at DESC
        LIMIT 3
      `, [userId]);

      if (inactiveResult.rows.length > 0) {
        console.log(`  üìù Vincula√ß√µes antigas desativadas: ${inactiveResult.rows.length}`);
        inactiveResult.rows.forEach(link => {
          console.log(`    - "${link.promocao_nome}" (desativada)`);
        });
      }

      console.log('');
    }

    // 3. Resumo final
    console.log('üìä RESUMO DO TESTE:');
    
    const allActiveLinks = await pool.query(`
      SELECT COUNT(*) as count
      FROM usuario_promocao up
      JOIN promocoes p ON up.promocao_id = p.promocao_id
      WHERE p.nome = 'TESTE COM PROMOTION NAME PREENCHIDO' AND up.status = 'active'
    `);

    console.log(`- Usu√°rios vinculados √† nova promo√ß√£o: ${allActiveLinks.rows[0].count}/3`);
    
    if (allActiveLinks.rows[0].count === '3') {
      console.log('‚úÖ TESTE PASSOU: Todos os usu√°rios foram vinculados √† nova promo√ß√£o!');
    } else {
      console.log('‚ùå TESTE FALHOU: Nem todos os usu√°rios foram vinculados corretamente!');
    }

  } catch (error) {
    console.error('‚ùå Erro na verifica√ß√£o:', error.message);
  } finally {
    await pool.end();
  }
}

verifyPromotionNameTest();