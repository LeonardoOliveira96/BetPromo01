const { Pool } = require('pg');

// Configura√ß√£o do banco de dados
const pool = new Pool({
  user: 'betpromo_user',
  host: 'localhost',
  database: 'betpromo',
  password: 'betpromo_pass',
  port: 5432,
});

async function checkRealImports() {
  try {
    console.log('üîç VERIFICANDO IMPORTA√á√ïES REAIS DO FRONTEND');
    console.log('='.repeat(60));

    // Verificar todos os registros na staging_import
    const allImports = await pool.query(`
      SELECT 
        promocao_nome,
        filename,
        COUNT(*) as total_registros,
        MIN(import_date) as primeira_importacao,
        MAX(import_date) as ultima_importacao
      FROM staging_import 
      GROUP BY promocao_nome, filename
      ORDER BY ultima_importacao DESC
    `);

    console.log('\nüì• TODAS AS IMPORTA√á√ïES POR ARQUIVO:');
    console.log('-'.repeat(60));
    
    if (allImports.rows.length === 0) {
      console.log('‚ùå Nenhuma importa√ß√£o encontrada');
    } else {
      allImports.rows.forEach((row, index) => {
        console.log(`${index + 1}. Arquivo: ${row.filename}`);
        console.log(`   Promo√ß√£o: "${row.promocao_nome}"`);
        console.log(`   Registros: ${row.total_registros}`);
        console.log(`   Primeira: ${row.primeira_importacao}`);
        console.log(`   √öltima: ${row.ultima_importacao}`);
        console.log('');
      });
    }

    // Verificar se h√° arquivos que n√£o s√£o de teste
    const realImports = await pool.query(`
      SELECT 
        promocao_nome,
        filename,
        COUNT(*) as total_registros
      FROM staging_import 
      WHERE filename NOT LIKE '%test%'
      AND filename NOT LIKE '%Test%'
      AND filename NOT LIKE '%TEST%'
      GROUP BY promocao_nome, filename
      ORDER BY total_registros DESC
    `);

    console.log('\nüìã IMPORTA√á√ïES REAIS (n√£o de teste):');
    console.log('-'.repeat(60));
    
    if (realImports.rows.length === 0) {
      console.log('‚ùå Nenhuma importa√ß√£o real encontrada');
      console.log('üí° Isso significa que todas as importa√ß√µes foram de teste');
    } else {
      realImports.rows.forEach((row, index) => {
        console.log(`${index + 1}. Arquivo: ${row.filename}`);
        console.log(`   Promo√ß√£o: "${row.promocao_nome}"`);
        console.log(`   Registros: ${row.total_registros}`);
        console.log('');
      });
    }

    // Verificar usu√°rios reais (n√£o de teste)
    const realUsers = await pool.query(`
      SELECT COUNT(*) as total_usuarios_reais
      FROM usuarios_final 
      WHERE smartico_user_id < 888000
      AND smartico_user_id < 999000
    `);

    console.log('\nüë• USU√ÅRIOS REAIS:');
    console.log('-'.repeat(30));
    console.log(`Total de usu√°rios reais: ${realUsers.rows[0].total_usuarios_reais}`);

    // Verificar vincula√ß√µes de usu√°rios reais
    const realUserPromotions = await pool.query(`
      SELECT 
        p.nome as promocao_nome,
        COUNT(up.smartico_user_id) as usuarios_vinculados
      FROM usuario_promocao up
      INNER JOIN promocoes p ON p.promocao_id = up.promocao_id
      WHERE up.smartico_user_id < 888000
      AND up.smartico_user_id < 999000
      GROUP BY p.promocao_id, p.nome
      ORDER BY usuarios_vinculados DESC
    `);

    console.log('\nüîó VINCULA√á√ïES DE USU√ÅRIOS REAIS:');
    console.log('-'.repeat(40));
    
    if (realUserPromotions.rows.length === 0) {
      console.log('‚ùå Nenhuma vincula√ß√£o de usu√°rio real encontrada');
    } else {
      realUserPromotions.rows.forEach(row => {
        console.log(`"${row.promocao_nome}": ${row.usuarios_vinculados} usu√°rios`);
      });
    }

  } catch (error) {
    console.error('‚ùå Erro:', error);
  } finally {
    await pool.end();
  }
}

checkRealImports();