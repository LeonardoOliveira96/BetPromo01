const { Pool } = require('pg');

// Configura√ß√£o do banco de dados
const pool = new Pool({
  user: 'betpromo_user',
  host: 'localhost',
  database: 'betpromo',
  password: 'betpromo_pass',
  port: 5432,
});

async function testPromotionCreation() {
  const client = await pool.connect();
  
  try {
    console.log('üß™ Iniciando teste de cria√ß√£o de promo√ß√£o...\n');
    
    // 1. Verificar estado inicial
    console.log('üìä Estado inicial das tabelas:');
    const initialPromocoesCount = await client.query('SELECT COUNT(*) FROM promocoes');
    const initialUsuarioPromocaoCount = await client.query('SELECT COUNT(*) FROM usuario_promocao');
    const initialHistoricoCount = await client.query('SELECT COUNT(*) FROM usuario_promocao_historico');
    
    console.log(`- Promo√ß√µes: ${initialPromocoesCount.rows[0].count}`);
    console.log(`- V√≠nculos usu√°rio-promo√ß√£o: ${initialUsuarioPromocaoCount.rows[0].count}`);
    console.log(`- Hist√≥rico: ${initialHistoricoCount.rows[0].count}\n`);
    
    // 2. Simular cria√ß√£o de uma nova promo√ß√£o manual (como seria feita pelo frontend)
    console.log('üéØ Criando nova promo√ß√£o de teste...');
    
    const promotionData = {
      nome: `Promo√ß√£o Teste ${Date.now()}`,
      regras: 'Regras de teste para verificar se n√£o h√° duplica√ß√£o',
      data_inicio: new Date().toISOString(),
      data_fim: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(), // 30 dias
      status: 'active'
    };
    
    // Inserir promo√ß√£o (simulando o que o promotionService.createPromotion faz)
    const insertResult = await client.query(`
      INSERT INTO promocoes (nome, regras, data_inicio, data_fim, status)
      VALUES ($1, $2, $3, $4, $5)
      RETURNING promocao_id, nome
    `, [promotionData.nome, promotionData.regras, promotionData.data_inicio, promotionData.data_fim, promotionData.status]);
    
    const newPromotion = insertResult.rows[0];
    console.log(`‚úÖ Promo√ß√£o criada: ID ${newPromotion.promocao_id}, Nome: "${newPromotion.nome}"\n`);
    
    // 3. Verificar se apenas UMA promo√ß√£o foi criada
    console.log('üîç Verificando se houve duplica√ß√£o...');
    
    const duplicateCheck = await client.query(`
      SELECT COUNT(*) as count 
      FROM promocoes 
      WHERE nome = $1
    `, [promotionData.nome]);
    
    const duplicateCount = parseInt(duplicateCheck.rows[0].count);
    
    if (duplicateCount === 1) {
      console.log('‚úÖ SUCESSO: Apenas 1 promo√ß√£o foi criada (sem duplica√ß√£o)');
    } else {
      console.log(`‚ùå PROBLEMA: ${duplicateCount} promo√ß√µes foram criadas com o mesmo nome!`);
    }
    
    // 4. Verificar estado final
    console.log('\nüìä Estado final das tabelas:');
    const finalPromocoesCount = await client.query('SELECT COUNT(*) FROM promocoes');
    const finalUsuarioPromocaoCount = await client.query('SELECT COUNT(*) FROM usuario_promocao');
    const finalHistoricoCount = await client.query('SELECT COUNT(*) FROM usuario_promocao_historico');
    
    console.log(`- Promo√ß√µes: ${finalPromocoesCount.rows[0].count} (incremento: +${finalPromocoesCount.rows[0].count - initialPromocoesCount.rows[0].count})`);
    console.log(`- V√≠nculos usu√°rio-promo√ß√£o: ${finalUsuarioPromocaoCount.rows[0].count} (incremento: +${finalUsuarioPromocaoCount.rows[0].count - initialUsuarioPromocaoCount.rows[0].count})`);
    console.log(`- Hist√≥rico: ${finalHistoricoCount.rows[0].count} (incremento: +${finalHistoricoCount.rows[0].count - initialHistoricoCount.rows[0].count})`);
    
    // 5. Simular teste de upload CSV com m√∫ltiplos usu√°rios para a mesma promo√ß√£o
    console.log('\nüß™ Testando cria√ß√£o via CSV (simulando upload)...');
    
    // Simular dados de staging_import
    const csvPromotionName = `Promo√ß√£o CSV Teste ${Date.now()}`;
    
    // Inserir dados de teste na staging_import (simulando upload de CSV)
    await client.query(`
      INSERT INTO staging_import (
        smartico_user_id, user_ext_id, core_sm_brand_id, crm_brand_id,
        ext_brand_id, crm_brand_name, promocao_nome, regras,
        data_inicio, data_fim, filename
      ) VALUES 
      (1001, 'ext_1', 1, 1, 'ext_brand_1', 'Test Brand', $1, 'Regras CSV', $2, $3, 'test_file.csv'),
      (1002, 'ext_2', 1, 1, 'ext_brand_1', 'Test Brand', $1, 'Regras CSV', $2, $3, 'test_file.csv'),
      (1003, 'ext_3', 1, 1, 'ext_brand_1', 'Test Brand', $1, 'Regras CSV', $2, $3, 'test_file.csv')
    `, [csvPromotionName, promotionData.data_inicio, promotionData.data_fim]);
    
    // Executar l√≥gica de cria√ß√£o de promo√ß√µes (como no csvService.createPromocoes)
    const csvPromotionResult = await client.query(`
      INSERT INTO promocoes (nome, regras, data_inicio, data_fim, status)
      SELECT DISTINCT 
        promocao_nome,
        regras,
        data_inicio,
        data_fim,
        'active'
      FROM staging_import 
      WHERE filename = 'test_file.csv'
        AND promocao_nome IS NOT NULL
        AND promocao_nome NOT IN (SELECT nome FROM promocoes)
      RETURNING promocao_id, nome
    `);
    
    if (csvPromotionResult.rows.length > 0) {
      console.log(`‚úÖ Promo√ß√£o CSV criada: ID ${csvPromotionResult.rows[0].promocao_id}, Nome: "${csvPromotionResult.rows[0].nome}"`);
      
      // Verificar se n√£o houve duplica√ß√£o
      const csvDuplicateCheck = await client.query(`
        SELECT COUNT(*) as count 
        FROM promocoes 
        WHERE nome = $1
      `, [csvPromotionName]);
      
      const csvDuplicateCount = parseInt(csvDuplicateCheck.rows[0].count);
      
      if (csvDuplicateCount === 1) {
        console.log('‚úÖ SUCESSO: Apenas 1 promo√ß√£o CSV foi criada (sem duplica√ß√£o)');
      } else {
        console.log(`‚ùå PROBLEMA: ${csvDuplicateCount} promo√ß√µes CSV foram criadas com o mesmo nome!`);
      }
    } else {
      console.log('‚ÑπÔ∏è Nenhuma nova promo√ß√£o CSV foi criada (pode j√° existir)');
    }
    
    // 6. Limpeza dos dados de teste
    console.log('\nüßπ Limpando dados de teste...');
    await client.query('DELETE FROM staging_import WHERE filename = $1', ['test_file.csv']);
    await client.query('DELETE FROM promocoes WHERE nome LIKE $1', ['%Teste%']);
    console.log('‚úÖ Dados de teste removidos');
    
    console.log('\nüéâ Teste conclu√≠do!');
    
  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error);
  } finally {
    client.release();
    await pool.end();
  }
}

// Executar teste
testPromotionCreation().catch(console.error);