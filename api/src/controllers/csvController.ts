import { Request, Response } from 'express';
import { CSVService } from '../services/csvService';
import { InsercaoResponseDTO } from '../types';
import { AppError } from '../middlewares/errorHandler';

/**
 * Controller de importa√ß√£o CSV
 * Gerencia endpoints relacionados ao upload e processamento de arquivos CSV
 */
export class CSVController {
  private csvService: CSVService;

  constructor() {
    this.csvService = new CSVService();
  }

  /**
   * POST /insercao
   * Recebe upload de arquivo CSV e processa APENAS usu√°rios
   * @param req - Request com arquivo CSV
   * @param res - Response com resultado da importa√ß√£o (apenas usu√°rios)
   */
  insercao = async (req: Request, res: Response): Promise<void> => {
    try {
      console.log('üéØ CONTROLLER - Requisi√ß√£o recebida (processamento de usu√°rios):', {
        method: req.method,
        url: req.url,
        hasFile: !!req.file,
        bodyKeys: Object.keys(req.body),
        body: req.body
      });

      // Verifica se arquivo foi enviado
      if (!req.file) {
        throw new AppError('Nenhum arquivo foi enviado', 400, 'NO_FILE');
      }

      console.log('üìÅ CONTROLLER - Arquivo recebido:', {
        filename: req.file.filename,
        originalname: req.file.originalname,
        size: req.file.size,
        mimetype: req.file.mimetype
      });

      // Processa arquivo CSV (apenas usu√°rios)
      const result = await this.csvService.processarCSV(req.file);

      // Prepara resposta de sucesso
      const response: InsercaoResponseDTO = {
        success: true,
        data: {
          filename: req.file.filename,
          totalRows: result.data?.totalRows ?? 0,
          processedRows: result.data?.processedRows ?? 0,
          newUsers: result.data?.newUsers ?? 0,
          newPromotions: result.data?.newPromotions ?? 0,
          newUserPromotions: result.data?.newUserPromotions ?? 0,
          errors: result.data?.errors ?? []
        },
        message: result.message
      };

      if (result.data) {
        console.log('Processamento de usu√°rios conclu√≠do:', {
          filename: result.data.filename,
          totalRows: result.data.totalRows,
          processedRows: result.data.processedRows,
          newUsers: result.data.newUsers
        });
      } else {
        console.log('Processamento conclu√≠do, mas result.data est√° indefinido');
      }

      res.status(200).json(response);

    } catch (error) {
      console.error('Erro na inser√ß√£o:', error);
      
      if (error instanceof AppError) {
        res.status(error.statusCode).json({
          success: false,
          error: {
            code: (error as any).code,
            message: error.message
          }
        });
      } else {
        res.status(500).json({
          success: false,
          error: {
            code: 'INTERNAL_ERROR',
            message: 'Erro interno do servidor'
          }
        });
      }
    }
  };

  /**
   * POST /vincular-usuarios
   * Vincula usu√°rios do CSV processado √† uma promo√ß√£o espec√≠fica
   * @param req - Request com filename e promotionName
   * @param res - Response com resultado da vincula√ß√£o
   */
  vincularUsuarios = async (req: Request, res: Response): Promise<void> => {
    try {
      console.log('üîó CONTROLLER - Requisi√ß√£o de vincula√ß√£o recebida:', {
        method: req.method,
        url: req.url,
        body: req.body
      });

      const { filename, promotionName } = req.body;

      // Valida√ß√µes
      if (!filename) {
        throw new AppError('Nome do arquivo √© obrigat√≥rio', 400, 'FILENAME_REQUIRED');
      }

      if (!promotionName || !promotionName.trim()) {
        throw new AppError('Nome da promo√ß√£o √© obrigat√≥rio', 400, 'PROMOTION_NAME_REQUIRED');
      }

      console.log('üîó CONTROLLER - Par√¢metros de vincula√ß√£o:', {
        filename,
        promotionName: promotionName.trim()
      });

      // Vincula usu√°rios √† promo√ß√£o
      const result = await this.csvService.vincularUsuariosAPromocao(filename, promotionName.trim());

      // Prepara resposta de sucesso
      const response = {
        success: true,
        data: {
          filename,
          promotionName: promotionName.trim(),
          newUserPromotions: result.newUserPromotions
        },
        message: `${result.newUserPromotions} usu√°rios vinculados √† promo√ß√£o "${promotionName.trim()}" com sucesso`
      };

      console.log('üîó CONTROLLER - Vincula√ß√£o conclu√≠da:', response.data);

      res.status(200).json(response);

    } catch (error) {
      console.error('‚ùå CONTROLLER - Erro na vincula√ß√£o:', error);
      
      if (error instanceof AppError) {
        res.status(error.statusCode).json({
          success: false,
          error: {
            code: (error as any).code,
            message: error.message
          }
        });
      } else {
        res.status(500).json({
          success: false,
          error: {
            code: 'INTERNAL_ERROR',
            message: 'Erro interno do servidor'
          }
        });
      }
    }
  };

  /**
   * GET /historico
   * Lista hist√≥rico de importa√ß√µes
   * @param req - Request
   * @param res - Response com lista de importa√ß√µes
   */
  historico = async (req: Request, res: Response): Promise<void> => {
    try {
      // Lista importa√ß√µes
      const importacoes = await this.csvService.listarImportacoes();

      res.status(200).json({
        success: true,
        data: {
          importacoes,
          total: importacoes.length
        },
        message: `${importacoes.length} importa√ß√µes encontradas`
      });

    } catch (error) {
      console.error('Erro ao listar hist√≥rico:', error);
      
      if (error instanceof AppError) {
        res.status(error.statusCode).json({
          success: false,
          error: {
            code: (error as any).code,
            message: error.message
          }
        });
      } else {
        res.status(500).json({
          success: false,
          error: {
            code: 'INTERNAL_ERROR',
            message: 'Erro interno do servidor'
          }
        });
      }
    }
  };

  /**
   * GET /insercao/historico/:filename
   * Obt√©m detalhes de uma importa√ß√£o espec√≠fica
   * @param req - Request com nome do arquivo
   * @param res - Response com detalhes da importa√ß√£o
   */
  detalhesImportacao = async (req: Request, res: Response): Promise<void> => {
    try {
      const filename = req.params.filename;

      if (!filename) {
        throw new AppError('Nome do arquivo √© obrigat√≥rio', 400, 'FILENAME_REQUIRED');
      }

      // Obt√©m detalhes da importa√ß√£o
      const detalhes = await this.csvService.obterDetalhesImportacao(filename);

      if (!detalhes || detalhes.length === 0) {
        throw new AppError('Importa√ß√£o n√£o encontrada', 404, 'IMPORT_NOT_FOUND');
      }

      res.status(200).json({
        success: true,
        data: {
          filename,
          detalhes,
          total: detalhes.length
        },
        message: 'Detalhes da importa√ß√£o obtidos com sucesso'
      });

    } catch (error) {
      console.error('Erro ao obter detalhes da importa√ß√£o:', error);
      
      if (error instanceof AppError) {
        res.status(error.statusCode).json({
          success: false,
          error: {
            code: (error as any).code,
            message: error.message
          }
        });
      } else {
        res.status(500).json({
          success: false,
          error: {
            code: 'INTERNAL_ERROR',
            message: 'Erro interno do servidor'
          }
        });
      }
    }
  };

  /**
   * POST /insercao/validate
   * Valida arquivo CSV sem processar (dry-run)
   * @param req - Request com arquivo CSV
   * @param res - Response com resultado da valida√ß√£o
   */
  validate = async (req: Request, res: Response): Promise<void> => {
    try {
      // Verifica se arquivo foi enviado
      if (!req.file) {
        throw new AppError('Nenhum arquivo foi enviado', 400, 'NO_FILE');
      }

      // TODO: Implementar valida√ß√£o sem processamento
      // Por enquanto, retorna sucesso b√°sico
      res.status(200).json({
        success: true,
        data: {
          filename: req.file.filename,
          size: req.file.size,
          mimetype: req.file.mimetype,
          valid: true
        },
        message: 'Arquivo v√°lido para processamento'
      });

    } catch (error) {
      console.error('Erro na valida√ß√£o:', error);
      
      if (error instanceof AppError) {
        res.status(error.statusCode).json({
          success: false,
          error: {
            code: (error as any).code,
            message: error.message
          }
        });
      } else {
        res.status(500).json({
          success: false,
          error: {
            code: 'INTERNAL_ERROR',
            message: 'Erro interno do servidor'
          }
        });
      }
    }
  };

  /**
   * GET /insercao/template
   * Retorna template CSV para download
   * @param req - Request
   * @param res - Response com arquivo template
   */
  template = async (req: Request, res: Response): Promise<void> => {
    try {
      // Define cabe√ßalhos do CSV
      const csvHeaders = [
        'smartico_user_id',
        'user_ext_id',
        'core_sm_brand_id',
        'crm_brand_id',
        'ext_brand_id',
        'crm_brand_name',
        'promocao_nome',
        'regras',
        'data_inicio',
        'data_fim'
      ];

      // Exemplo de linha
      const exampleRow = [
        '123456789',
        'user_ext_001',
        '1',
        '100',
        'brand_001',
        'Marca Exemplo',
        'Promo√ß√£o de Boas-vindas',
        'Regras da promo√ß√£o aqui',
        '2024-01-01 00:00:00',
        '2024-12-31 23:59:59'
      ];

      // Cria conte√∫do CSV
      const csvContent = [
        csvHeaders.join(','),
        exampleRow.join(',')
      ].join('\n');

      // Define headers para download
      res.setHeader('Content-Type', 'text/csv');
      res.setHeader('Content-Disposition', 'attachment; filename="template_importacao.csv"');

      res.status(200).send(csvContent);

    } catch (error) {
      console.error('Erro ao gerar template:', error);
      res.status(500).json({
        success: false,
        error: {
          code: 'TEMPLATE_ERROR',
          message: 'Erro ao gerar template'
        }
      });
    }
  };

  /**
   * GET /health
   * Verifica sa√∫de do servi√ßo de importa√ß√£o
   * @param req - Request
   * @param res - Response com status
   */
  health = async (req: Request, res: Response): Promise<void> => {
    try {
      // Verifica se diret√≥rio de upload existe e √© acess√≠vel
      const uploadPath = process.env.UPLOAD_PATH || './uploads';
      
      res.status(200).json({
        success: true,
        data: {
          service: 'csv-import',
          status: 'healthy',
          uploadPath,
          timestamp: new Date().toISOString()
        },
        message: 'Servi√ßo funcionando corretamente'
      });

    } catch (error) {
      console.error('Erro no health check:', error);
      res.status(503).json({
        success: false,
        data: {
          service: 'csv-import',
          status: 'unhealthy',
          timestamp: new Date().toISOString()
        },
        error: {
          code: 'HEALTH_CHECK_ERROR',
          message: 'Erro ao verificar sa√∫de do servi√ßo'
        }
      });
    }
  };
}