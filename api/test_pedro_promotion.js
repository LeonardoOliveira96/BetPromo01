const { Pool } = require('pg');

// Configura√ß√£o do banco de dados
const pool = new Pool({
  user: 'betpromo_user',
  host: 'localhost',
  database: 'betpromo',
  password: 'betpromo_pass',
  port: 5432,
});

async function testPedroPromotion() {
  try {
    console.log('üß™ TESTE ESPEC√çFICO DA PROMO√á√ÉO PEDRO');
    console.log('='.repeat(60));

    // 1. Verificar se a promo√ß√£o Pedro existe
    console.log('\nüìä VERIFICANDO PROMO√á√ÉO PEDRO:');
    console.log('-'.repeat(40));
    
    const pedroPromotion = await pool.query(`
      SELECT promocao_id, nome, 
             (SELECT COUNT(*) FROM usuario_promocao WHERE promocao_id = p.promocao_id) as usuarios_vinculados
      FROM promocoes p 
      WHERE nome ILIKE '%pedro%'
    `);

    if (pedroPromotion.rows.length === 0) {
      console.log('‚ùå Promo√ß√£o Pedro n√£o encontrada!');
      return;
    }

    const promo = pedroPromotion.rows[0];
    console.log(`‚úÖ Promo√ß√£o encontrada: "${promo.nome}" (ID: ${promo.promocao_id})`);
    console.log(`   Usu√°rios vinculados: ${promo.usuarios_vinculados}`);

    // 2. Simular importa√ß√£o CSV com nome Pedro
    console.log('\nüì• SIMULANDO IMPORTA√á√ÉO CSV PARA PEDRO:');
    console.log('-'.repeat(40));
    
    // Limpar dados de teste anteriores
    await pool.query('DELETE FROM staging_import WHERE smartico_user_id >= 888000');
    await pool.query('DELETE FROM usuarios_final WHERE smartico_user_id >= 888000');
    await pool.query('DELETE FROM usuario_promocao WHERE smartico_user_id >= 888000');
    
    // Inserir dados de teste na staging com o nome exato da promo√ß√£o Pedro
    const testData = [
      { smartico_user_id: 888001, user_ext_id: 'pedro_test_001', promocao_nome: promo.nome },
      { smartico_user_id: 888002, user_ext_id: 'pedro_test_002', promocao_nome: promo.nome },
      { smartico_user_id: 888003, user_ext_id: 'pedro_test_003', promocao_nome: promo.nome }
    ];

    for (const data of testData) {
      await pool.query(`
        INSERT INTO staging_import (smartico_user_id, user_ext_id, promocao_nome, filename, import_date)
        VALUES ($1, $2, $3, 'test_pedro.csv', NOW())
      `, [data.smartico_user_id, data.user_ext_id, data.promocao_nome]);
    }

    console.log(`‚úÖ Inseridos 3 registros na staging com promo√ß√£o "${promo.nome}"`);

    // 3. Executar merge de usu√°rios
    console.log('\nüîÑ EXECUTANDO MERGE DE USU√ÅRIOS:');
    console.log('-'.repeat(40));
    
    const insertResult = await pool.query(`
      INSERT INTO usuarios_final (smartico_user_id, user_ext_id, created_at, updated_at)
      SELECT DISTINCT smartico_user_id, user_ext_id, NOW(), NOW()
      FROM staging_import s
      WHERE smartico_user_id >= 888000
      AND NOT EXISTS (
        SELECT 1 FROM usuarios_final u 
        WHERE u.smartico_user_id = s.smartico_user_id
      )
      RETURNING smartico_user_id
    `);

    console.log(`‚úÖ ${insertResult.rows.length} usu√°rios inseridos`);

    // 4. Executar vincula√ß√£o com promo√ß√µes
    console.log('\nüîó EXECUTANDO VINCULA√á√ÉO COM PROMO√á√ïES:');
    console.log('-'.repeat(40));
    
    // Verificar se a vincula√ß√£o vai funcionar
    const matchTest = await pool.query(`
      SELECT s.smartico_user_id, s.promocao_nome, p.promocao_id, p.nome as promo_db_nome
      FROM staging_import s
      LEFT JOIN promocoes p ON p.nome = s.promocao_nome
      WHERE s.smartico_user_id >= 888000
    `);

    console.log('üîç TESTE DE CORRESPOND√äNCIA:');
    matchTest.rows.forEach(row => {
      console.log(`   Usu√°rio ${row.smartico_user_id}: "${row.promocao_nome}" ‚Üí ${row.promocao_id ? `Promo√ß√£o ID ${row.promocao_id}` : 'SEM CORRESPOND√äNCIA'}`);
    });

    const linkResult = await pool.query(`
      INSERT INTO usuario_promocao (smartico_user_id, promocao_id, data_vinculo, created_at, updated_at)
      SELECT DISTINCT s.smartico_user_id, p.promocao_id, NOW(), NOW(), NOW()
      FROM staging_import s
      INNER JOIN promocoes p ON p.nome = s.promocao_nome
      WHERE s.smartico_user_id >= 888000
      AND NOT EXISTS (
        SELECT 1 FROM usuario_promocao up 
        WHERE up.smartico_user_id = s.smartico_user_id 
        AND up.promocao_id = p.promocao_id
      )
      RETURNING smartico_user_id, promocao_id
    `);

    console.log(`‚úÖ ${linkResult.rows.length} vincula√ß√µes criadas`);

    // 5. Verificar resultado final
    console.log('\nüìä RESULTADO FINAL:');
    console.log('-'.repeat(40));
    
    const finalCheck = await pool.query(`
      SELECT promocao_id, nome, 
             (SELECT COUNT(*) FROM usuario_promocao WHERE promocao_id = p.promocao_id) as usuarios_vinculados
      FROM promocoes p 
      WHERE nome ILIKE '%pedro%'
    `);

    const finalPromo = finalCheck.rows[0];
    console.log(`Promo√ß√£o "${finalPromo.nome}" agora tem ${finalPromo.usuarios_vinculados} usu√°rios vinculados`);

    // 6. Verificar usu√°rios espec√≠ficos
    const testUsers = await pool.query(`
      SELECT up.smartico_user_id, p.nome as promocao_nome
      FROM usuario_promocao up
      INNER JOIN promocoes p ON p.promocao_id = up.promocao_id
      WHERE up.smartico_user_id >= 888000
      ORDER BY up.smartico_user_id
    `);

    console.log('\nüë• USU√ÅRIOS DE TESTE VINCULADOS:');
    testUsers.rows.forEach(user => {
      console.log(`   Usu√°rio ${user.smartico_user_id} ‚Üí ${user.promocao_nome}`);
    });

    if (finalPromo.usuarios_vinculados > promo.usuarios_vinculados) {
      console.log('\nüéâ SUCESSO! A vincula√ß√£o funcionou!');
    } else {
      console.log('\n‚ùå FALHA! A vincula√ß√£o n√£o funcionou');
    }

  } catch (error) {
    console.error('‚ùå Erro no teste:', error);
  } finally {
    await pool.end();
  }
}

testPedroPromotion();