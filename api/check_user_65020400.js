const { Pool } = require('pg');

const pool = new Pool({
  host: 'localhost',
  port: 5432,
  database: 'betpromo',
  user: 'betpromo_user',
  password: 'betpromo_pass'
});

async function checkUser() {
  try {
    console.log('üîç Investigando o usu√°rio 65020400...\n');
    
    // 1. Verificar registros na staging
    console.log('üìä REGISTROS NA STAGING:');
    console.log('========================');
    const stagingResult = await pool.query(`
      SELECT promocao_nome, filename, import_date, processed
      FROM staging_import 
      WHERE smartico_user_id = 65020400
      ORDER BY import_date DESC
      LIMIT 5
    `);
    
    if (stagingResult.rows.length === 0) {
      console.log('‚ùå Nenhum registro encontrado na staging');
    } else {
      stagingResult.rows.forEach((row, index) => {
        console.log(`${index + 1}. ${row.import_date}`);
        console.log(`   Promo√ß√£o: "${row.promocao_nome}"`);
        console.log(`   Arquivo: ${row.filename}`);
        console.log(`   Processado: ${row.processed}`);
        console.log('');
      });
    }
    
    // 2. Verificar se o usu√°rio existe na tabela final
    console.log('üë§ USU√ÅRIO NA TABELA FINAL:');
    console.log('===========================');
    const userResult = await pool.query(`
      SELECT * FROM usuarios_final 
      WHERE smartico_user_id = 65020400
      LIMIT 1
    `);
    
    if (userResult.rows.length === 0) {
      console.log('‚ùå Usu√°rio n√£o encontrado na tabela usuarios_final');
    } else {
      console.log('‚úÖ Usu√°rio encontrado na tabela usuarios_final');
      const user = userResult.rows[0];
      console.log('   Colunas dispon√≠veis:', Object.keys(user));
      console.log('   smartico_user_id:', user.smartico_user_id);
    }
    
    // 3. Explica√ß√£o do problema
    console.log('\nüí° EXPLICA√á√ÉO DO PROBLEMA:');
    console.log('==========================');
    console.log('O usu√°rio 65020400 est√° aparecendo apenas com "Promo√ß√£o Padr√£o bet7k" porque:');
    console.log('');
    console.log('1. ‚ùå Este usu√°rio N√ÉO foi inclu√≠do nos nossos testes de corre√ß√£o');
    console.log('2. ‚ùå Nossos testes usaram usu√°rios fict√≠cios: 888001, 888002, 888003');
    console.log('3. ‚úÖ A corre√ß√£o est√° funcionando, mas apenas para NOVOS uploads');
    console.log('4. ‚úÖ O usu√°rio 65020400 mant√©m suas vincula√ß√µes antigas');
    console.log('');
    console.log('üß™ PARA TESTAR A CORRE√á√ÉO:');
    console.log('=========================');
    console.log('1. Crie uma nova promo√ß√£o no frontend (ex: "Teste Final")');
    console.log('2. Fa√ßa upload de um CSV que INCLUA o usu√°rio 65020400');
    console.log('3. Verifique se ele √© vinculado √† nova promo√ß√£o');
    console.log('');
    console.log('üìù Exemplo de CSV para teste:');
    console.log('id_usuario,promocao_nome');
    console.log('65020400,Promo√ß√£o Padr√£o bet7k');
    console.log('');
    console.log('‚úÖ Com a corre√ß√£o, ele ser√° vinculado √† promo√ß√£o "Teste Final"');
    console.log('   em vez de "Promo√ß√£o Padr√£o bet7k"');
    
  } catch (error) {
    console.error('‚ùå Erro:', error.message);
  } finally {
    await pool.end();
  }
}

checkUser();