const { Pool } = require('pg');
const fs = require('fs');
const path = require('path');

// Configura√ß√£o do banco de dados
const pool = new Pool({
  user: 'betpromo_user',
  host: 'localhost',
  database: 'betpromo',
  password: 'betpromo_pass',
  port: 5432,
});

async function testCSVImportDirect() {
  try {
    console.log('üß™ TESTE DIRETO DA CORRE√á√ÉO DE VINCULA√á√ÉO');
    console.log('='.repeat(60));

    // 1. Verificar estado inicial
    console.log('\nüìä ESTADO INICIAL:');
    console.log('-'.repeat(40));
    
    const initialState = await pool.query(`
      SELECT promocao_id, nome, 
             (SELECT COUNT(*) FROM usuario_promocao WHERE promocao_id = p.promocao_id) as usuarios_vinculados
      FROM promocoes p 
      WHERE nome = 'Bonus de Deposito'
    `);

    if (initialState.rows.length > 0) {
      console.log(`Promo√ß√£o "Bonus de Deposito" tem ${initialState.rows[0].usuarios_vinculados} usu√°rios vinculados`);
    } else {
      console.log('‚ùå Promo√ß√£o "Bonus de Deposito" n√£o encontrada');
      return;
    }

    // 2. Simular inser√ß√£o na staging com nome de promo√ß√£o espec√≠fico
    console.log('\nüì• SIMULANDO IMPORTA√á√ÉO CSV:');
    console.log('-'.repeat(40));
    
    // Limpar staging primeiro
    await pool.query('DELETE FROM staging_import WHERE smartico_user_id >= 999000');
    
    // Inserir dados de teste na staging com o nome correto da promo√ß√£o
    const testData = [
      { smartico_user_id: 999001, user_ext_id: 'test_user_001', promocao_nome: 'Bonus de Deposito' },
      { smartico_user_id: 999002, user_ext_id: 'test_user_002', promocao_nome: 'Bonus de Deposito' },
      { smartico_user_id: 999003, user_ext_id: 'test_user_003', promocao_nome: 'Bonus de Deposito' }
    ];

    for (const data of testData) {
      await pool.query(`
        INSERT INTO staging_import (smartico_user_id, user_ext_id, promocao_nome, filename, import_date)
        VALUES ($1, $2, $3, 'test_bonus_deposito.csv', NOW())
      `, [data.smartico_user_id, data.user_ext_id, data.promocao_nome]);
    }

    console.log('‚úÖ Dados inseridos na staging com promo√ß√£o "Bonus de Deposito"');

    // 3. Executar merge de usu√°rios
    console.log('\nüîÑ EXECUTANDO MERGE DE USU√ÅRIOS:');
    console.log('-'.repeat(40));
    
    await pool.query(`
      INSERT INTO usuarios_final (smartico_user_id, user_ext_id, created_at, updated_at)
      SELECT DISTINCT smartico_user_id, user_ext_id, NOW(), NOW()
      FROM staging_import s
      WHERE smartico_user_id >= 999000
      AND NOT EXISTS (
        SELECT 1 FROM usuarios_final u 
        WHERE u.smartico_user_id = s.smartico_user_id
      )
    `);

    console.log('‚úÖ Usu√°rios inseridos/atualizados');

    // 4. Executar vincula√ß√£o com promo√ß√µes
    console.log('\nüîó EXECUTANDO VINCULA√á√ÉO COM PROMO√á√ïES:');
    console.log('-'.repeat(40));
    
    await pool.query(`
      INSERT INTO usuario_promocao (smartico_user_id, promocao_id, data_vinculo, created_at, updated_at)
      SELECT DISTINCT s.smartico_user_id, p.promocao_id, NOW(), NOW(), NOW()
      FROM staging_import s
      INNER JOIN promocoes p ON p.nome = s.promocao_nome
      WHERE s.smartico_user_id >= 999000
      AND NOT EXISTS (
        SELECT 1 FROM usuario_promocao up 
        WHERE up.smartico_user_id = s.smartico_user_id 
        AND up.promocao_id = p.promocao_id
      )
    `);

    console.log('‚úÖ Vincula√ß√µes criadas');

    // 5. Verificar resultado final
    console.log('\nüìä RESULTADO FINAL:');
    console.log('-'.repeat(40));
    
    const finalState = await pool.query(`
      SELECT promocao_id, nome, 
             (SELECT COUNT(*) FROM usuario_promocao WHERE promocao_id = p.promocao_id) as usuarios_vinculados
      FROM promocoes p 
      WHERE nome = 'Bonus de Deposito'
    `);

    console.log(`Promo√ß√£o "Bonus de Deposito" agora tem ${finalState.rows[0].usuarios_vinculados} usu√°rios vinculados`);

    // 6. Verificar usu√°rios espec√≠ficos
    const testUsers = await pool.query(`
      SELECT up.smartico_user_id, p.nome as promocao_nome
      FROM usuario_promocao up
      INNER JOIN promocoes p ON p.promocao_id = up.promocao_id
      WHERE up.smartico_user_id >= 999000
      ORDER BY up.smartico_user_id
    `);

    console.log('\nüë• USU√ÅRIOS DE TESTE VINCULADOS:');
    testUsers.rows.forEach(user => {
      console.log(`Usu√°rio ${user.smartico_user_id} ‚Üí ${user.promocao_nome}`);
    });

    if (finalState.rows[0].usuarios_vinculados > initialState.rows[0].usuarios_vinculados) {
      console.log('\nüéâ SUCESSO! A corre√ß√£o est√° funcionando!');
      console.log('Os usu√°rios foram corretamente vinculados √† promo√ß√£o "Bonus de Deposito"');
    } else {
      console.log('\n‚ùå FALHA! A corre√ß√£o n√£o est√° funcionando como esperado');
    }

  } catch (error) {
    console.error('‚ùå Erro no teste:', error);
  } finally {
    await pool.end();
  }
}

testCSVImportDirect();